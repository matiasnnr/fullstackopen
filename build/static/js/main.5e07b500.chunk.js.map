{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","catch","error","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCR1CK,EAAU,4DA4BD,EArBA,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAChBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNV,WAAW,GAEf,OAAOK,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAAAO,GAEX,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCxB9BK,eAAe,YAAkB,IAAfC,EAAc,EAAdA,QAC7B,OAAgB,OAAZA,EACO,KAIP,qBAAKlB,UAAU,QAAf,SACKkB,KCHPC,EAAS,WAQX,OACI,sBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACI,uBACA,2GAqGGC,EAhGH,WACR,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACNC,IAEKzB,MAAK,SAAA0B,GACFT,EAASS,MAEZC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,aACjC,IACHD,QAAQC,IAAI,SAAUd,EAAMe,OAAQ,SAIpC,IA2CMC,EAAcZ,EACdJ,EACAA,EAAMiB,QAAO,SAAA/C,GAAI,OAAuB,IAAnBA,EAAKG,aAEhC,OACI,gCACI,uCACA,cAAC,EAAD,CAAcmB,QAASc,IACvB,8BACI,yBAAQ9B,QAAS,kBAAM6B,GAAYD,IAAnC,kBACUA,EAAU,YAAc,WAGtC,6BACKY,EAAYE,KAAI,SAAAhD,GAAI,OACjB,cAAC,EAAD,CAEIA,KAAMA,EACNC,iBAAkB,kBAtCX,SAAAW,GACd,oEAAgEA,GAAzE,IACMZ,EAAO8B,EAAMmB,MAAK,SAAAC,GAAC,OAAIA,EAAEtC,KAAOA,KAChCuC,EAAW,2BAAQnD,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EAAmB3B,EAAIuC,GAClBrC,MAAK,SAAAsC,GACFrB,EAASD,EAAMkB,KAAI,SAAAhD,GAAI,OAAIA,EAAKY,KAAOA,EAAKZ,EAAOoD,SAEtDX,OAAM,SAAAC,GACHL,EAAgB,SAAD,OACFrC,EAAKK,QADH,sCAGfgD,YAAW,WACPhB,EAAgB,QACjB,KACHN,EAASD,EAAMiB,QAAO,SAAAG,GAAC,OAAIA,EAAEtC,KAAOA,SAsBJ0C,CAAmBtD,EAAKY,MAF3CZ,EAAKY,SAMtB,uBAAM2C,SA5DE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfrD,QAAS2B,EACTnB,MAAM,IAAI8C,MAAOC,cACjBzD,UAAW0D,KAAKC,SAAW,GAC3BlD,GAAIkB,EAAMe,OAAS,GAGvBN,EACYmB,GACP5C,MAAK,SAAAsC,GACFrB,EAASD,EAAMb,OAAOmC,IACtBnB,EAAW,OAEdQ,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,YA6C5B,UACI,uBACImB,MAAO/B,EACPgC,SApES,SAACR,GACtBb,QAAQC,IAAIY,EAAMS,OAAOF,OACzB9B,EAAWuB,EAAMS,OAAOF,UAoEhB,wBAAQG,KAAK,SAAb,qBAGJ,cAAC,EAAD,Q,MC5GZC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5e07b500.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n        ? 'make not important' : 'make important';\r\n\r\n    return (\r\n        <li className=\"note\">\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n\r\n    )\r\n}\r\n\r\nexport default Note;","import axios from 'axios'\r\nconst baseUrl = 'https://fullstackopen-api-express.herokuapp.com/api/notes'\r\n\r\n// const getAll = () => {\r\n//     const request = axios.get(baseUrl)\r\n//     return request.then(response => response.data)\r\n// }\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    update\r\n}","import React from 'react';\r\n\r\nexport default Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Note from './components/Note';\r\nimport axios from 'axios';\r\nimport noteService from './services/notes';\r\nimport Notification from './components/Notification';\r\n\r\nconst Footer = () => {\r\n\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    useEffect(() => {\r\n        noteService\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNotes(initialNotes)\r\n            })\r\n            .catch(error => console.log('fail'))\r\n    }, [])\r\n    console.log('render', notes.length, 'notes')\r\n\r\n    // ...\r\n\r\n    const handleNoteChange = (event) => {\r\n        console.log(event.target.value)\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() < 0.5,\r\n            id: notes.length + 1,\r\n        }\r\n\r\n        noteService\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote))\r\n                setNewNote('')\r\n            })\r\n            .catch(error => console.log('fail'))\r\n    }\r\n\r\n    const toggleImportanceOf = id => {\r\n        const url = `https://fullstackopen-api-express.herokuapp.com/api/notes/${id}`\r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = { ...note, important: !note.important }\r\n\r\n        noteService.update(id, changedNote)\r\n            .then(returnedNote => {\r\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage(\r\n                    `Note '${note.content}' was already removed from server`\r\n                )\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n                setNotes(notes.filter(n => n.id !== id))\r\n            })\r\n    }\r\n\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter(note => note.important === true);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <div>\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                    show {showAll ? 'important' : 'all'}\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {notesToShow.map(note =>\r\n                    <Note\r\n                        key={note.id}\r\n                        note={note}\r\n                        toggleImportance={() => toggleImportanceOf(note.id)}\r\n                    />\r\n                )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input\r\n                    value={newNote}\r\n                    onChange={handleNoteChange}\r\n                />\r\n                <button type=\"submit\">save</button>\r\n            </form>\r\n\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}